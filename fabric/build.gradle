plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

// apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://modmaven.dev/'
    }
    maven {
        name = "Valkyrien Skies Internal"
        url = 'https://maven.valkyrienskies.org'
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org"
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

dependencies {
    modImplementation libs.fabric
    modApi libs.fabric.api
    modImplementation(libs.fabric.kotlin)

    // Architectury API
    modApi(libs.fabric.architectury)

    // Mod menu
    modImplementation(libs.fabric.modmenu)
    modImplementation(libs.fabric.clothconfig) {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modRuntimeOnly(libs.mixinextras)

    // Valkyrien Skies 2
    modApi(libs.fabric.valkyrienskies) //{
//        exclude(group: "com.simibubi.create")
//    }

    modImplementation(libs.fabric.obsidianui)

    modImplementation(libs.fabric.kubejs)

    modRuntimeOnly("org.valkyrienskies.eureka:eureka-fabric:1.1.1-beta.2+682a896ad8")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

//    filesMatching("fabric.mod.json") {
//        expand "version": project.version, "vs2_version": project.vs2_version.substring(0, project.vs2_version.indexOf('+'))
//    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
            dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = "org.valkyrienskies.eureka"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (project.vs_maven_username && project.vs_maven_password) {
            println "Publishing to VS Maven"
            maven {
                url = project.vs_maven_url
                credentials {
                    username = project.vs_maven_username
                    password = project.vs_maven_password
                }
            }
        }
        // Add repositories to publish to here.
        if (System.getenv("GITHUB_ACTOR") != null) {
            println "Publishing to Github Packages"
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/ValkyrienSkies/Eureka")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}